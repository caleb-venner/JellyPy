name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for release'
        required: true
        type: string

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Restore dependencies
        run: dotnet restore Jellyfin.Plugin.Jellypy.sln

      - name: Build Release
        run: dotnet build Jellyfin.Plugin.Jellypy.sln --configuration Release --no-restore

      - name: Create plugin directory
        run: mkdir -p ./plugin-release

      - name: Copy plugin files
        run: |
          # Copy only the plugin-specific files, not all Jellyfin framework dependencies
          cp Jellyfin.Plugin.Jellypy/bin/Release/net8.0/Jellyfin.Plugin.Jellypy.dll ./plugin-release/
          cp Jellyfin.Plugin.Jellypy/bin/Release/net8.0/Jellyfin.Plugin.Jellypy.deps.json ./plugin-release/
          cp Jellyfin.Plugin.Jellypy/bin/Release/net8.0/Jellyfin.Plugin.Jellypy.pdb ./plugin-release/
          cp Jellyfin.Plugin.Jellypy/bin/Release/net8.0/Jellyfin.Plugin.Jellypy.xml ./plugin-release/

      - name: Create plugin archives
        run: |
          cd plugin-release
          # Create GitHub release zip
          zip -r ../jellypy-${{ steps.version.outputs.VERSION }}.zip .
          # Create plugin repository release zip  
          zip -r ../jellypy_$(echo "${{ steps.version.outputs.VERSION }}" | sed 's/v//').zip .
          cd ..

      - name: Copy to releases directory and calculate checksum
        run: |
          # Copy to releases directory for plugin repository
          cp jellypy_$(echo "${{ steps.version.outputs.VERSION }}" | sed 's/v//').zip releases/
          # Calculate MD5 checksum for manifest
          echo "CHECKSUM=$(md5sum jellypy_$(echo "${{ steps.version.outputs.VERSION }}" | sed 's/v//').zip | cut -d' ' -f1)" >> $GITHUB_OUTPUT
        id: checksum

      - name: Generate release notes
        id: notes
        run: |
          cat << EOF > release-notes.md
          ## Jellypy Plugin ${{ steps.version.outputs.VERSION }}

          ### Installation

          1. Download \`jellypy-${{ steps.version.outputs.VERSION }}.zip\`
          2. Extract to your Jellyfin plugins directory
          3. Restart Jellyfin

          See [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) for configuration instructions.
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: release-notes.md
          files: |
            jellypy-${{ steps.version.outputs.VERSION }}.zip
            jellypy_$(echo "${{ steps.version.outputs.VERSION }}" | sed 's/v//').zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
