using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using IronPython.Hosting;
using IronPython.Runtime;
using MediaBrowser.Controller.Entities;
using MediaBrowser.Controller.Entities.TV;
using Microsoft.Extensions.Logging;
using Microsoft.Scripting.Hosting;

namespace Jellyfin.Plugin.Jellypy;

/// <summary>
/// Initializes a new instance of the <see cref="ExecuteScript"/> class.
/// </summary>
public class ExecuteScript
{
    private ILogger _logger;
    private BaseItem _item;

    /// <summary>
    /// Initializes a new instance of the <see cref="ExecuteScript"/> class.
    /// </summary>
    public ExecuteScript()
    {
    }

    /// <summary>
    /// Method <see cref="RunScript"/> class.
    /// </summary>
    /// <param name="logger">...</param>
    /// <param name="item">....</param>
    /// <returns>Script success as bool.</returns>
    public async Task RunScript(ILogger logger, BaseItem item)
    {
        _logger = logger;
        _item = item;
        _logger.LogDebug("RunScript Function Called!");
        if (_item is Episode)
        {
            _logger.LogDebug("Calling RunScript!");
        }
        else
        {
            return;
        }

        _logger.LogDebug("Retreiving Episode Details.");
        Episode episode = _item as Episode;
        string seasonTitle = episode.Series.Name;
        int seasonNumber = (int)episode.Season.IndexNumber;
        int episodeNumber = (int)episode.IndexNumber;
        var args = new Dictionary<string, object>
        {
            { "-st", seasonTitle },
            { "-sn", seasonNumber }, { "-en", episodeNumber }
        };
        _logger.LogDebug("Creating IronPy Runtime.");
        ScriptRuntimeSetup setup = Python.CreateRuntimeSetup(null);
        ScriptRuntime runtime = new ScriptRuntime(setup);
        ScriptEngine engine = Python.GetEngine(runtime);
        var searchPaths = new List<string>
        {
            AppDomain.CurrentDomain.BaseDirectory + @"/opt/anaconda3/lib/python3.1/site-packages",
            @"/Users/calebvenner/projects/jellyfin/jellypy/Jellyfin.Plugin.Jellypy"
        };
        _logger.LogDebug("Setting Paths and Scope.");
        engine.SetSearchPaths(searchPaths);
        ScriptSource source = engine.CreateScriptSourceFromFile(AppDomain.CurrentDomain.BaseDirectory + "download.py");
        ScriptScope scope = engine.CreateScope();
        _logger.LogDebug("Parsing Args.");
        engine.GetSysModule().SetVariable("argv", args);
        _logger.LogDebug("Executing Script.");
        await source.Execute(scope);
    }
}
